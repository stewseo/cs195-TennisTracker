import groovy.sql.Sql
import com.bmuschko.gradle.docker.tasks.image.*
import static com.bmuschko.gradle.docker.tasks.image.Dockerfile.Instruction
import static com.bmuschko.gradle.docker.tasks.image.Dockerfile.FromInstruction
import static com.bmuschko.gradle.docker.tasks.image.Dockerfile.From

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'mysql:mysql-connector-java:8.0.29'
    }
}

plugins{
    id 'jacoco'
    id("idea")
    id("cs195-TennisTracker.java-conventions")
    id("java-library")
    id("com.gradle.plugin-publish") version "0.12.0"
    id ("com.bmuschko.docker-remote-api") version "7.4.0"
    id "com.avast.gradle.docker-compose" version "0.16.8"
}

repositories {
    mavenCentral()
}


tasks.register('dockerBuildImage', DockerBuildImage) {
    inputDir = file('docker')
}

tasks.create('createDockerfile', Dockerfile) {
    from('openjdk:17-alpine')
    copyFile('my-app-1.0.jar', '/app/my-app-1.0.jar')
    entryPoint('java')
    defaultCommand('-jar', '/app/my-app-1.0.jar')
    exposePort(8080)
}

dockerCompose {
    useComposeFiles = ['docker-compose.yml']
}

createDockerfile {
    List<Instruction> originalInstructions = new ArrayList<Instruction>(instructions.get())
    int fromInstructionIndex = originalInstructions
            .findIndexOf { it.keyword == FromInstruction.KEYWORD }
    originalInstructions.remove(fromInstructionIndex)
    FromInstruction baseImage = new FromInstruction(new From('openjdk:8-alpine'))
    originalInstructions.add(0, baseImage)
    instructions.set(originalInstructions)
}


var jooqVersion = '3.16.6'
var testcontainersVersion = "1.17.3"
var flywayVersion = '9.0.1'
var log4jVersion = '2.18.0'
var junitVersion = '5.9.0-RC1'
var slf4jVersion = '2.0.0-alpha7'

dependencies {

    implementation("redis.clients:jedis:4.2.3")

    implementation("org.postgresql:postgresql:42.4.0")

    implementation 'mysql:mysql-connector-java:8.0.29'
    implementation("org.apache.logging.log4j:log4j-core:$log4jVersion")
    implementation("org.slf4j:slf4j-api:$slf4jVersion")

    implementation("org.jooq:jooq-meta:$jooqVersion")
    implementation("org.jooq:jooq:$jooqVersion")

    testImplementation("org.testcontainers:mysql:$testcontainersVersion")
    testImplementation ("org.testcontainers:postgresql:$testcontainersVersion")
    testImplementation("org.testcontainers:junit-jupiter:$testcontainersVersion")

    implementation("org.flywaydb:flyway-core:$flywayVersion")

    testImplementation("org.junit.jupiter:junit-jupiter-api:$junitVersion")
    testRuntimeOnly ("org.junit.jupiter:junit-jupiter-engine:$junitVersion")
}


