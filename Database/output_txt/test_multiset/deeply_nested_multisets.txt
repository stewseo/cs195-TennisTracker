test_multiset/deeply_nested_multisets
Record2<Integer, Result<Record2<Integer, 
                Result<Record2<Integer, 
                        Result<Record2<Integer, 
                                Result<Record1<Integer>>
                                >>
                        >>
                >>> result


Query Parts:
select
  1 "a",
  multiset(
    select
      2 "b",
      multiset(
        select
          3 "c",
          multiset(
            select
              4 "d",
              multiset(
                select 5 "e"
              )
          )
      )
  )
Sql Stringset @t = @@group_concat_max_len;
set @@group_concat_max_len = 4294967295;
select
  ? as `a`,
  (
    select coalesce(
      json_merge_preserve(
        '[]',
        concat(
          '[',
          group_concat(json_array(
            `v0`,
            json_extract(`v1`, '$')
          ) separator ','),
          ']'
        )
      ),
      json_array()
    )
    from (
      select
        ? as `v0`,
        (
          select coalesce(
            json_merge_preserve(
              '[]',
              concat(
                '[',
                group_concat(json_array(
                  `v0`,
                  json_extract(`v1`, '$')
                ) separator ','),
                ']'
              )
            ),
            json_array()
          )
          from (
            select
              ? as `v0`,
              (
                select coalesce(
                  json_merge_preserve(
                    '[]',
                    concat(
                      '[',
                      group_concat(json_array(
                        `v0`,
                        json_extract(`v1`, '$')
                      ) separator ','),
                      ']'
                    )
                  ),
                  json_array()
                )
                from (
                  select
                    ? as `v0`,
                    (
                      select coalesce(
                        json_merge_preserve(
                          '[]',
                          concat(
                            '[',
                            group_concat(json_array(`v0`) separator ','),
                            ']'
                          )
                        ),
                        json_array()
                      )
                      from (
                        select ? as `v0`
                      ) as `t`
                    ) as `v1`
                ) as `t`
              ) as `v1`
          ) as `t`
        ) as `v1`
    ) as `t`
  );
set @@group_concat_max_len = @t;
The formatted plan as returned by the database:
 +----+-----------+----------+----------+------+-------------+------+-------+------+------+--------+--------------+
|  id|select_type|table     |partitions|type  |possible_keys|key   |key_len|ref   |  rows|filtered|Extra         |
+----+-----------+----------+----------+------+-------------+------+-------+------+------+--------+--------------+
|   1|PRIMARY    |{null}    |{null}    |{null}|{null}       |{null}|{null} |{null}|{null}|  {null}|No tables used|
|   2|SUBQUERY   |<derived3>|{null}    |system|{null}       |{null}|{null} |{null}|     1|   100.0|{null}        |
|   3|DERIVED    |{null}    |{null}    |{null}|{null}       |{null}|{null} |{null}|{null}|  {null}|No tables used|
|   4|SUBQUERY   |<derived5>|{null}    |system|{null}       |{null}|{null} |{null}|     1|   100.0|{null}        |
|   5|DERIVED    |{null}    |{null}    |{null}|{null}       |{null}|{null} |{null}|{null}|  {null}|No tables used|
|   6|SUBQUERY   |<derived7>|{null}    |system|{null}       |{null}|{null} |{null}|     1|   100.0|{null}        |
|   7|DERIVED    |{null}    |{null}    |{null}|{null}       |{null}|{null} |{null}|{null}|  {null}|No tables used|
|   8|SUBQUERY   |<derived9>|{null}    |system|{null}       |{null}|{null} |{null}|     1|   100.0|{null}        |
|   9|DERIVED    |{null}    |{null}    |{null}|{null}       |{null}|{null} |{null}|{null}|  {null}|No tables used|
+----+-----------+----------+----------+------+-------------+------+-------+------+------+--------+--------------+

The cost the database associated with the execution of the query:  NaN
The estimated number of rows (cardinality) that is to be returned by the query: 0.0
The actual number of rows (cardinality) returned by the query:  1

Result Records:
  +----+--------------------------+
|   a|multiset                  |
+----+--------------------------+
|   1|[(2, [(3, [(4, [(5)])])])]|
+----+--------------------------+
