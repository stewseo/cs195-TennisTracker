plugins {
    id 'org.openjfx.javafxplugin' version '0.0.12'
    id 'org.beryx.jlink' version '2.24.4'
    id 'idea'
    id 'java-library'
    id 'application'
    id 'org.javamodularity.moduleplugin' version '1.8.10'
    id 'nu.studer.jooq' version '7.1.1'
}

javafx {
    version = "18"
    modules = ['javafx.controls', 'javafx.fxml', 'javafx.web', 'javafx.base']
}

group 'com.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.8.2'
}

sourceCompatibility = '17'
targetCompatibility = '17'


application {
    mainModule = 'com.example.cs195tennis'
    mainClass = 'com.example.cs195tennis.Main'
}

dependencies {
    implementation 'org.jooq:jooq-meta:3.16.6'
    jooqGenerator 'org.xerial:sqlite-jdbc'
    implementation 'org.jooq:jooq:3.16.6'
    implementation 'net.raumzeitfalle.fx:scenic-view:11.0.2'
    implementation('fr.brouillard.oss:cssfx:11.5.1') { exclude group: 'org.openjfx' }
    implementation 'io.github.palexdev:materialfx:11.14.0-EA3'
    implementation 'com.google.guava:guava:31.1-jre'
    implementation group: 'com.opencsv', name: 'opencsv', version: '5.6'
    implementation 'org.apache.logging.log4j:log4j-core:2.17.2'
    implementation 'org.controlsfx:controlsfx:11.1.1'
    implementation 'org.xerial:sqlite-jdbc:3.36.0.3'
    implementation'org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0'
    implementation 'org.xerial:sqlite-jdbc'
    implementation 'org.apache.logging.log4j:log4j-api'
    implementation'org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0'
    implementation 'org.kordamp.ikonli:ikonli-javafx:12.3.1'
    implementation'org.kordamp.bootstrapfx:bootstrapfx-core:0.4.0'
    implementation 'org.kordamp.ikonli:ikonli-materialdesign2-pack:12.3.1'
}

run {
    jvmArgs = ['-Djdk.gtk.version=2',
               "--add-exports=java.base/java.lang.reflect=com.jfoenix",
               "--add-exports=javafx.controls/com.sun.javafx.scene.control.behavior=com.jfoenix",
               "--add-exports=javafx.controls/com.sun.javafx.scene.control=com.jfoenix",
               "--add-exports=javafx.base/com.sun.javafx.binding=com.jfoenix",
               "--add-exports=java.base/com.sun.javafx.binding=com.jfoenix",
               "--add-exports=javafx.graphics/com.sun.javafx.stage=com.jfoenix"
    ]
}
jlink {
    imageZip = project.file("${buildDir}/distributions/app-${javafx.platform.classifier}.zip") as RegularFile
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'cs195Tennis'
    }

}

jlinkZip {
    group = 'distribution'
}

test {
    useJUnitPlatform()
}
import org.jooq.meta.jaxb.Logging

jooq {
    g
    configurations {
        main {  // name of the jOOQ configuration
            generateSchemaSourceOnCompilation = true  // default (can be omitted)

            generationTool {
                logging = Logging.WARN
                jdbc {
                    driver = 'org.postgresql.Driver'
                    url = 'jdbc:postgresql://localhost:5432/sample'
                    user = 'some_user'
                    password = 'some_secret'
                    properties {
                        property {
                            key = 'ssl'
                            value = 'true'
                        }
                    }
                }
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.postgres.PostgresDatabase'
                        inputSchema = 'public'
                        forcedTypes {
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'JSONB?'
                            }
                            forcedType {
                                name = 'varchar'
                                includeExpression = '.*'
                                includeTypes = 'INET'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                    }
                    target {
                        packageName = 'nu.studer.sample'
                        directory = 'build/generated-src/jooq/main'  // default (can be omitted)
                    }
                    strategy.name = 'org.jooq.codegen.DefaultGeneratorStrategy'
                }
            }
        }
    }
}



